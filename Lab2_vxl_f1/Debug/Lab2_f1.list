
Lab2_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002004  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080021d4  080021d4  000031d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800222c  0800222c  00004058  2**0
                  CONTENTS
  4 .ARM          00000000  0800222c  0800222c  00004058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800222c  0800222c  00004058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800222c  0800222c  0000322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002230  08002230  00003230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08002234  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000058  0800228c  00004058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800228c  0000410c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000873c  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  0000c7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0000e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000776  00000000  00000000  0000ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f0e  00000000  00000000  0000f3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baf9  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067218  00000000  00000000  0002bde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00092ffd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  00093040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0009577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080021bc 	.word	0x080021bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	080021bc 	.word	0x080021bc

08000210 <System_Lab2_init>:
	{SEG0_5_GPIO_Port, SEG0_5_Pin},  //  f
	{SEG0_6_GPIO_Port, SEG0_6_Pin}   //  g
};


void System_Lab2_init(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	Led7Seg_int(Led_7Seg_Array);
 8000214:	4809      	ldr	r0, [pc, #36]	@ (800023c <System_Lab2_init+0x2c>)
 8000216:	f000 f897 	bl	8000348 <Led7Seg_int>
	timer_init();
 800021a:	f000 fb81 	bl	8000920 <timer_init>

	//timer scan led
	setTimer(0, 250);
 800021e:	21fa      	movs	r1, #250	@ 0xfa
 8000220:	2000      	movs	r0, #0
 8000222:	f000 fb87 	bl	8000934 <setTimer>
	setTimer(1, 250);
 8000226:	21fa      	movs	r1, #250	@ 0xfa
 8000228:	2001      	movs	r0, #1
 800022a:	f000 fb83 	bl	8000934 <setTimer>
	//DOT
	setTimer(2, 1000);
 800022e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000232:	2002      	movs	r0, #2
 8000234:	f000 fb7e 	bl	8000934 <setTimer>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000000 	.word	0x20000000

08000240 <En_led_7_seg>:

uint8_t Counter_Led_Pos = 0;
uint8_t Max_Led = 2;
uint8_t Buffer = 0;

void En_led_7_seg(){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, Led_Pos[0]);
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <En_led_7_seg+0x28>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	2140      	movs	r1, #64	@ 0x40
 800024e:	4807      	ldr	r0, [pc, #28]	@ (800026c <En_led_7_seg+0x2c>)
 8000250:	f000 ff8c 	bl	800116c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, Led_Pos[1]);
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <En_led_7_seg+0x28>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	2180      	movs	r1, #128	@ 0x80
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <En_led_7_seg+0x2c>)
 8000260:	f000 ff84 	bl	800116c <HAL_GPIO_WritePin>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000038 	.word	0x20000038
 800026c:	40010800 	.word	0x40010800

08000270 <Exercise_2>:

void Exercise_2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	//DATA
	if(flag_timer[0]){
 8000276:	4b2d      	ldr	r3, [pc, #180]	@ (800032c <Exercise_2+0xbc>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d014      	beq.n	80002a8 <Exercise_2+0x38>
		Buffer++;
 800027e:	4b2c      	ldr	r3, [pc, #176]	@ (8000330 <Exercise_2+0xc0>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4b2a      	ldr	r3, [pc, #168]	@ (8000330 <Exercise_2+0xc0>)
 8000288:	701a      	strb	r2, [r3, #0]
		if(Buffer > 9){
 800028a:	4b29      	ldr	r3, [pc, #164]	@ (8000330 <Exercise_2+0xc0>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b09      	cmp	r3, #9
 8000290:	d902      	bls.n	8000298 <Exercise_2+0x28>
			Buffer = 0;
 8000292:	4b27      	ldr	r3, [pc, #156]	@ (8000330 <Exercise_2+0xc0>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		}

		display7SEG(Buffer);
 8000298:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <Exercise_2+0xc0>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f9df 	bl	8000660 <display7SEG>
		flag_timer[0] = 0;
 80002a2:	4b22      	ldr	r3, [pc, #136]	@ (800032c <Exercise_2+0xbc>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	801a      	strh	r2, [r3, #0]
	}

	//scan led
	if(flag_timer[1]){
 80002a8:	4b20      	ldr	r3, [pc, #128]	@ (800032c <Exercise_2+0xbc>)
 80002aa:	885b      	ldrh	r3, [r3, #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d02e      	beq.n	800030e <Exercise_2+0x9e>

		for(int i = 0; i < Max_Led; i++){
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	e011      	b.n	80002da <Exercise_2+0x6a>
			Led_Pos[i] = (En_Led_Pos[Counter_Led_Pos] >> i) & 0b1;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <Exercise_2+0xc4>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000338 <Exercise_2+0xc8>)
 80002be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	fa22 f303 	lsr.w	r3, r2, r3
 80002c8:	f003 0201 	and.w	r2, r3, #1
 80002cc:	491b      	ldr	r1, [pc, #108]	@ (800033c <Exercise_2+0xcc>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < Max_Led; i++){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <Exercise_2+0xd0>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4293      	cmp	r3, r2
 80002e4:	dbe7      	blt.n	80002b6 <Exercise_2+0x46>
		}

		Counter_Led_Pos++;
 80002e6:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <Exercise_2+0xc4>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <Exercise_2+0xc4>)
 80002f0:	701a      	strb	r2, [r3, #0]
		if(Counter_Led_Pos > Max_Led - 1){
 80002f2:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <Exercise_2+0xd0>)
 80002f4:	781a      	ldrb	r2, [r3, #0]
 80002f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <Exercise_2+0xc4>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d802      	bhi.n	8000304 <Exercise_2+0x94>
			Counter_Led_Pos = 0;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <Exercise_2+0xc4>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
		}

		En_led_7_seg();
 8000304:	f7ff ff9c 	bl	8000240 <En_led_7_seg>
		flag_timer[1] = 0;
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <Exercise_2+0xbc>)
 800030a:	2200      	movs	r2, #0
 800030c:	805a      	strh	r2, [r3, #2]
	}

	//DOT BLINK
	if(flag_timer[2]){
 800030e:	4b07      	ldr	r3, [pc, #28]	@ (800032c <Exercise_2+0xbc>)
 8000310:	889b      	ldrh	r3, [r3, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d006      	beq.n	8000324 <Exercise_2+0xb4>
		HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000316:	2110      	movs	r1, #16
 8000318:	480a      	ldr	r0, [pc, #40]	@ (8000344 <Exercise_2+0xd4>)
 800031a:	f000 ff3f 	bl	800119c <HAL_GPIO_TogglePin>
		flag_timer[2] = 0;
 800031e:	4b03      	ldr	r3, [pc, #12]	@ (800032c <Exercise_2+0xbc>)
 8000320:	2200      	movs	r2, #0
 8000322:	809a      	strh	r2, [r3, #4]
	}

}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000cc 	.word	0x200000cc
 8000330:	20000075 	.word	0x20000075
 8000334:	20000074 	.word	0x20000074
 8000338:	20000040 	.word	0x20000040
 800033c:	20000038 	.word	0x20000038
 8000340:	20000048 	.word	0x20000048
 8000344:	40010800 	.word	0x40010800

08000348 <Led7Seg_int>:
 *      Author: Admin
 */
#include "Led7Seg_Display.h"
////////////////            DISPLAY-7SEG             ////////////////

void Led7Seg_int(GPIO_7SEG_Config GPIO_Config[7]){
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 7; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00f      	b.n	8000376 <Led7Seg_int+0x2e>
		Led_7Seg_Array[i] = GPIO_Config[i];
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	18d1      	adds	r1, r2, r3
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <Led7Seg_int+0x40>)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	4413      	add	r3, r2
 8000366:	460a      	mov	r2, r1
 8000368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800036c:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 7; i++) {
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	3301      	adds	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2b06      	cmp	r3, #6
 800037a:	ddec      	ble.n	8000356 <Led7Seg_int+0xe>
	}
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	20000000 	.word	0x20000000

0800038c <calculator_BCD_to_7SEG>:
// 4bit [3:0] -> [A:B]
uint8_t A, B, C, D;
// f(ABCD)
bool a, b, c, d, e, f, g;

void calculator_BCD_to_7SEG(int num){
 800038c:	b4b0      	push	{r4, r5, r7}
 800038e:	b08f      	sub	sp, #60	@ 0x3c
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	uint8_t  buffer;
	unsigned int LED_4bit[] = {
 8000394:	4b9a      	ldr	r3, [pc, #616]	@ (8000600 <calculator_BCD_to_7SEG+0x274>)
 8000396:	f107 040c 	add.w	r4, r7, #12
 800039a:	461d      	mov	r5, r3
 800039c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003a8:	e884 0003 	stmia.w	r4, {r0, r1}
		    0b0110, //  6
		    0b0111, //  7
		    0b1000, //  8
		    0b1001  //  9
		};
	buffer = LED_4bit[num];
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	3338      	adds	r3, #56	@ 0x38
 80003b2:	443b      	add	r3, r7
 80003b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80003b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	// 4bit [3:0] -> [A:B]
	A = (buffer >> 3) & 1;
 80003bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003c0:	08db      	lsrs	r3, r3, #3
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b8e      	ldr	r3, [pc, #568]	@ (8000604 <calculator_BCD_to_7SEG+0x278>)
 80003cc:	701a      	strb	r2, [r3, #0]
	B = (buffer >> 2) & 1;
 80003ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003d2:	089b      	lsrs	r3, r3, #2
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b8a      	ldr	r3, [pc, #552]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80003de:	701a      	strb	r2, [r3, #0]
	C = (buffer >> 1) & 1;
 80003e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003e4:	085b      	lsrs	r3, r3, #1
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b87      	ldr	r3, [pc, #540]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 80003f0:	701a      	strb	r2, [r3, #0]
	D = (buffer >> 0) & 1;
 80003f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b84      	ldr	r3, [pc, #528]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 80003fe:	701a      	strb	r2, [r3, #0]

	// f(ABCD)
	a = ((!B)&(!D)) | C | (B&D) | A;
 8000400:	4b81      	ldr	r3, [pc, #516]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b82      	ldr	r3, [pc, #520]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4313      	orrs	r3, r2
 800040a:	b2db      	uxtb	r3, r3
 800040c:	2b00      	cmp	r3, #0
 800040e:	bf0c      	ite	eq
 8000410:	2301      	moveq	r3, #1
 8000412:	2300      	movne	r3, #0
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	4b7c      	ldr	r3, [pc, #496]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4313      	orrs	r3, r2
 800041e:	4a7a      	ldr	r2, [pc, #488]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 8000420:	7811      	ldrb	r1, [r2, #0]
 8000422:	4a7b      	ldr	r2, [pc, #492]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000424:	7812      	ldrb	r2, [r2, #0]
 8000426:	400a      	ands	r2, r1
 8000428:	b2d2      	uxtb	r2, r2
 800042a:	4313      	orrs	r3, r2
 800042c:	4a75      	ldr	r2, [pc, #468]	@ (8000604 <calculator_BCD_to_7SEG+0x278>)
 800042e:	7812      	ldrb	r2, [r2, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	2b00      	cmp	r3, #0
 8000434:	bf14      	ite	ne
 8000436:	2301      	movne	r3, #1
 8000438:	2300      	moveq	r3, #0
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b75      	ldr	r3, [pc, #468]	@ (8000614 <calculator_BCD_to_7SEG+0x288>)
 800043e:	701a      	strb	r2, [r3, #0]
	b = (!B) | ((!C)&(!D)) | (C&D);
 8000440:	4b71      	ldr	r3, [pc, #452]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	2301      	moveq	r3, #1
 800044a:	2300      	movne	r3, #0
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b6f      	ldr	r3, [pc, #444]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 8000450:	7819      	ldrb	r1, [r3, #0]
 8000452:	4b6f      	ldr	r3, [pc, #444]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	430b      	orrs	r3, r1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4619      	mov	r1, r3
 800046a:	4b68      	ldr	r3, [pc, #416]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b68      	ldr	r3, [pc, #416]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4013      	ands	r3, r2
 8000474:	b2db      	uxtb	r3, r3
 8000476:	430b      	orrs	r3, r1
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf14      	ite	ne
 800047c:	2301      	movne	r3, #1
 800047e:	2300      	moveq	r3, #0
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b65      	ldr	r3, [pc, #404]	@ (8000618 <calculator_BCD_to_7SEG+0x28c>)
 8000484:	701a      	strb	r2, [r3, #0]
	c = (!C) | D | B;
 8000486:	4b61      	ldr	r3, [pc, #388]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	4b5e      	ldr	r3, [pc, #376]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	4313      	orrs	r3, r2
 800049c:	4a5a      	ldr	r2, [pc, #360]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 800049e:	7812      	ldrb	r2, [r2, #0]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b5b      	ldr	r3, [pc, #364]	@ (800061c <calculator_BCD_to_7SEG+0x290>)
 80004ae:	701a      	strb	r2, [r3, #0]
	d = ((!B)&(!D)) | ((!B)&C) | ((B&!C)&D) | (C&(!D)) | A;
 80004b0:	4b55      	ldr	r3, [pc, #340]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4b56      	ldr	r3, [pc, #344]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	bf0c      	ite	eq
 80004c0:	2301      	moveq	r3, #1
 80004c2:	2300      	movne	r3, #0
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf0c      	ite	eq
 80004d0:	2301      	moveq	r3, #1
 80004d2:	2300      	movne	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	4b4c      	ldr	r3, [pc, #304]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	400b      	ands	r3, r1
 80004de:	431a      	orrs	r2, r3
 80004e0:	4b49      	ldr	r3, [pc, #292]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4b49      	ldr	r3, [pc, #292]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	bf0c      	ite	eq
 80004ee:	2301      	moveq	r3, #1
 80004f0:	2300      	movne	r3, #0
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	400b      	ands	r3, r1
 80004f6:	4946      	ldr	r1, [pc, #280]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 80004f8:	7809      	ldrb	r1, [r1, #0]
 80004fa:	400b      	ands	r3, r1
 80004fc:	431a      	orrs	r2, r3
 80004fe:	4b43      	ldr	r3, [pc, #268]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4619      	mov	r1, r3
 8000504:	4b42      	ldr	r3, [pc, #264]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	bf0c      	ite	eq
 800050c:	2301      	moveq	r3, #1
 800050e:	2300      	movne	r3, #0
 8000510:	b2db      	uxtb	r3, r3
 8000512:	400b      	ands	r3, r1
 8000514:	4313      	orrs	r3, r2
 8000516:	4a3b      	ldr	r2, [pc, #236]	@ (8000604 <calculator_BCD_to_7SEG+0x278>)
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	4313      	orrs	r3, r2
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf14      	ite	ne
 8000520:	2301      	movne	r3, #1
 8000522:	2300      	moveq	r3, #0
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b3e      	ldr	r3, [pc, #248]	@ (8000620 <calculator_BCD_to_7SEG+0x294>)
 8000528:	701a      	strb	r2, [r3, #0]
	e = ((!B)&(!D)) | (C&(!D));
 800052a:	4b37      	ldr	r3, [pc, #220]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b38      	ldr	r3, [pc, #224]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4313      	orrs	r3, r2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	4b32      	ldr	r3, [pc, #200]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4619      	mov	r1, r3
 8000548:	4b31      	ldr	r3, [pc, #196]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf0c      	ite	eq
 8000550:	2301      	moveq	r3, #1
 8000552:	2300      	movne	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	400b      	ands	r3, r1
 8000558:	4313      	orrs	r3, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <calculator_BCD_to_7SEG+0x298>)
 8000566:	701a      	strb	r2, [r3, #0]
	f = ((!C)&(!D)) | (B&(!C)) | (B&(!D)) | A;
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4313      	orrs	r3, r2
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
 800057e:	461a      	mov	r2, r3
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	4b21      	ldr	r3, [pc, #132]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	400b      	ands	r3, r1
 8000596:	431a      	orrs	r2, r3
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <calculator_BCD_to_7SEG+0x284>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	bf0c      	ite	eq
 80005a6:	2301      	moveq	r3, #1
 80005a8:	2300      	movne	r3, #0
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	400b      	ands	r3, r1
 80005ae:	4313      	orrs	r3, r2
 80005b0:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <calculator_BCD_to_7SEG+0x278>)
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <calculator_BCD_to_7SEG+0x29c>)
 80005c2:	701a      	strb	r2, [r3, #0]
	g = ((!B)&C) | (B&(!C)) | A | (B&(!D));
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf0c      	ite	eq
 80005cc:	2301      	moveq	r3, #1
 80005ce:	2300      	movne	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	401a      	ands	r2, r3
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <calculator_BCD_to_7SEG+0x280>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf0c      	ite	eq
 80005e8:	2301      	moveq	r3, #1
 80005ea:	2300      	movne	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	400b      	ands	r3, r1
 80005f0:	4313      	orrs	r3, r2
 80005f2:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <calculator_BCD_to_7SEG+0x278>)
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <calculator_BCD_to_7SEG+0x27c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	e015      	b.n	800062c <calculator_BCD_to_7SEG+0x2a0>
 8000600:	080021d4 	.word	0x080021d4
 8000604:	20000076 	.word	0x20000076
 8000608:	20000077 	.word	0x20000077
 800060c:	20000078 	.word	0x20000078
 8000610:	20000079 	.word	0x20000079
 8000614:	2000007a 	.word	0x2000007a
 8000618:	2000007b 	.word	0x2000007b
 800061c:	2000007c 	.word	0x2000007c
 8000620:	2000007d 	.word	0x2000007d
 8000624:	2000007e 	.word	0x2000007e
 8000628:	2000007f 	.word	0x2000007f
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <calculator_BCD_to_7SEG+0x2cc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
 800063a:	400b      	ands	r3, r1
 800063c:	4313      	orrs	r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	bf14      	ite	ne
 8000642:	2301      	movne	r3, #1
 8000644:	2300      	moveq	r3, #0
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <calculator_BCD_to_7SEG+0x2d0>)
 800064a:	701a      	strb	r2, [r3, #0]

}
 800064c:	bf00      	nop
 800064e:	373c      	adds	r7, #60	@ 0x3c
 8000650:	46bd      	mov	sp, r7
 8000652:	bcb0      	pop	{r4, r5, r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000079 	.word	0x20000079
 800065c:	20000080 	.word	0x20000080

08000660 <display7SEG>:



void display7SEG(int num){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	calculator_BCD_to_7SEG(num);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fe8f 	bl	800038c <calculator_BCD_to_7SEG>
    HAL_GPIO_WritePin(Led_7Seg_Array[0].Port, Led_7Seg_Array[0].Pin, !a);
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <display7SEG+0xc0>)
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <display7SEG+0xc0>)
 8000674:	8899      	ldrh	r1, [r3, #4]
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <display7SEG+0xc4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f083 0301 	eor.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	f000 fd73 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[1].Port, Led_7Seg_Array[1].Pin, !b);
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <display7SEG+0xc0>)
 8000688:	6898      	ldr	r0, [r3, #8]
 800068a:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <display7SEG+0xc0>)
 800068c:	8999      	ldrh	r1, [r3, #12]
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <display7SEG+0xc8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f083 0301 	eor.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	f000 fd67 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[2].Port, Led_7Seg_Array[2].Pin, !c);
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <display7SEG+0xc0>)
 80006a0:	6918      	ldr	r0, [r3, #16]
 80006a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <display7SEG+0xc0>)
 80006a4:	8a99      	ldrh	r1, [r3, #20]
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <display7SEG+0xcc>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f083 0301 	eor.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f000 fd5b 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[3].Port, Led_7Seg_Array[3].Pin, !d);
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <display7SEG+0xc0>)
 80006b8:	6998      	ldr	r0, [r3, #24]
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <display7SEG+0xc0>)
 80006bc:	8b99      	ldrh	r1, [r3, #28]
 80006be:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <display7SEG+0xd0>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	f000 fd4f 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[4].Port, Led_7Seg_Array[4].Pin, !e);
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <display7SEG+0xc0>)
 80006d0:	6a18      	ldr	r0, [r3, #32]
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <display7SEG+0xc0>)
 80006d4:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <display7SEG+0xd4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f083 0301 	eor.w	r3, r3, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	f000 fd43 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[5].Port, Led_7Seg_Array[5].Pin, !f);
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <display7SEG+0xc0>)
 80006e8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <display7SEG+0xc0>)
 80006ec:	8d99      	ldrh	r1, [r3, #44]	@ 0x2c
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <display7SEG+0xd8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	f000 fd37 	bl	800116c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[6].Port, Led_7Seg_Array[6].Pin, !g);
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <display7SEG+0xc0>)
 8000700:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000702:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <display7SEG+0xc0>)
 8000704:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <display7SEG+0xdc>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	f000 fd2b 	bl	800116c <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000000 	.word	0x20000000
 8000724:	2000007a 	.word	0x2000007a
 8000728:	2000007b 	.word	0x2000007b
 800072c:	2000007c 	.word	0x2000007c
 8000730:	2000007d 	.word	0x2000007d
 8000734:	2000007e 	.word	0x2000007e
 8000738:	2000007f 	.word	0x2000007f
 800073c:	20000080 	.word	0x20000080

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fa27 	bl	8000b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f809 	bl	800075e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 f88e 	bl	800086c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000750:	f000 f840 	bl	80007d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  System_Lab2_init();
 8000754:	f7ff fd5c 	bl	8000210 <System_Lab2_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Exercise_2();
 8000758:	f7ff fd8a 	bl	8000270 <Exercise_2>
 800075c:	e7fc      	b.n	8000758 <main+0x18>

0800075e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b090      	sub	sp, #64	@ 0x40
 8000762:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	2228      	movs	r2, #40	@ 0x28
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fcf9 	bl	8002164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fd1b 	bl	80011d0 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007a0:	f000 f8b8 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff89 	bl	80016d4 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007c8:	f000 f8a4 	bl	8000914 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3740      	adds	r7, #64	@ 0x40
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_TIM2_Init+0x94>)
 80007f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_TIM2_Init+0x94>)
 80007fa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_TIM2_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_TIM2_Init+0x94>)
 8000808:	2209      	movs	r2, #9
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_TIM2_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_TIM2_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	@ (8000868 <MX_TIM2_Init+0x94>)
 800081a:	f001 f883 	bl	8001924 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000824:	f000 f876 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_TIM2_Init+0x94>)
 8000836:	f001 fa0f 	bl	8001c58 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f868 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_TIM2_Init+0x94>)
 8000852:	f001 fc0f 	bl	8002074 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 f85a 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000084 	.word	0x20000084

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_GPIO_Init+0x9c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a20      	ldr	r2, [pc, #128]	@ (8000908 <MX_GPIO_Init+0x9c>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_GPIO_Init+0x9c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_GPIO_Init+0x9c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a1a      	ldr	r2, [pc, #104]	@ (8000908 <MX_GPIO_Init+0x9c>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_GPIO_Init+0x9c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOT_Pin|LED_T_Pin|EN0_Pin|EN1_Pin
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <MX_GPIO_Init+0xa0>)
 80008b8:	f000 fc58 	bl	800116c <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin|SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin
 80008bc:	2200      	movs	r2, #0
 80008be:	217f      	movs	r1, #127	@ 0x7f
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <MX_GPIO_Init+0xa4>)
 80008c2:	f000 fc53 	bl	800116c <HAL_GPIO_WritePin>
                          |SEG0_4_Pin|SEG0_5_Pin|SEG0_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOT_Pin LED_T_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|LED_T_Pin|EN0_Pin|EN1_Pin
 80008c6:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80008ca:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2302      	movs	r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <MX_GPIO_Init+0xa0>)
 80008e0:	f000 fac0 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_0_Pin SEG0_1_Pin SEG0_2_Pin SEG0_3_Pin
                           SEG0_4_Pin SEG0_5_Pin SEG0_6_Pin */
  GPIO_InitStruct.Pin = SEG0_0_Pin|SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin
 80008e4:	237f      	movs	r3, #127	@ 0x7f
 80008e6:	60bb      	str	r3, [r7, #8]
                          |SEG0_4_Pin|SEG0_5_Pin|SEG0_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_GPIO_Init+0xa4>)
 80008fc:	f000 fab2 	bl	8000e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	40010800 	.word	0x40010800
 8000910:	40010c00 	.word	0x40010c00

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <timer_init>:
uint16_t timer_counter[10];
uint16_t timer_MUL[10];



void timer_init(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <timer_init+0x10>)
 8000926:	f001 f84d 	bl	80019c4 <HAL_TIM_Base_Start_IT>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000084 	.word	0x20000084

08000934 <setTimer>:
/////////////////////////////////////////////////////////////
void setTimer(uint8_t index, uint16_t duration){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	80bb      	strh	r3, [r7, #4]
	timer_MUL[index] = duration/TIMER_CYCLE;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	88ba      	ldrh	r2, [r7, #4]
 8000948:	490c      	ldr	r1, [pc, #48]	@ (800097c <setTimer+0x48>)
 800094a:	fba1 1202 	umull	r1, r2, r1, r2
 800094e:	08d2      	lsrs	r2, r2, #3
 8000950:	b291      	uxth	r1, r2
 8000952:	4a0b      	ldr	r2, [pc, #44]	@ (8000980 <setTimer+0x4c>)
 8000954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[index] = 0;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <setTimer+0x50>)
 800095c:	2100      	movs	r1, #0
 800095e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	timer_counter[index] = timer_MUL[index];
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4906      	ldr	r1, [pc, #24]	@ (8000980 <setTimer+0x4c>)
 8000968:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <setTimer+0x54>)
 800096e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	cccccccd 	.word	0xcccccccd
 8000980:	200000f4 	.word	0x200000f4
 8000984:	200000cc 	.word	0x200000cc
 8000988:	200000e0 	.word	0x200000e0

0800098c <timer_run>:

void timer_run(uint8_t index){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	if(timer_counter[index] > 0){
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <timer_run+0x58>)
 800099a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d01b      	beq.n	80009da <timer_run+0x4e>
		timer_counter[index]--;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <timer_run+0x58>)
 80009a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009aa:	3a01      	subs	r2, #1
 80009ac:	b291      	uxth	r1, r2
 80009ae:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <timer_run+0x58>)
 80009b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[index] <= 0){
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <timer_run+0x58>)
 80009b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10c      	bne.n	80009da <timer_run+0x4e>
			flag_timer[index] = 1;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4a09      	ldr	r2, [pc, #36]	@ (80009e8 <timer_run+0x5c>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timer_counter[index] = timer_MUL[index];
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4907      	ldr	r1, [pc, #28]	@ (80009ec <timer_run+0x60>)
 80009d0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80009d4:	4a03      	ldr	r2, [pc, #12]	@ (80009e4 <timer_run+0x58>)
 80009d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}

}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	200000e0 	.word	0x200000e0
 80009e8:	200000cc 	.word	0x200000cc
 80009ec:	200000f4 	.word	0x200000f4

080009f0 <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a00:	d10d      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x2e>
		for(int i = 0; i < 10; i++){
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e007      	b.n	8000a18 <HAL_TIM_PeriodElapsedCallback+0x28>
			timer_run(i);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffbd 	bl	800098c <timer_run>
		for(int i = 0; i < 10; i++){
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b09      	cmp	r3, #9
 8000a1c:	ddf4      	ble.n	8000a08 <HAL_TIM_PeriodElapsedCallback+0x18>
		}
	}

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a14      	ldr	r2, [pc, #80]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_MspInit+0x60>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <HAL_MspInit+0x60>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a9c:	d113      	bne.n	8000ac6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <HAL_TIM_Base_MspInit+0x44>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad0 <HAL_TIM_Base_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_TIM_Base_MspInit+0x44>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	201c      	movs	r0, #28
 8000abc:	f000 f99b 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac0:	201c      	movs	r0, #28
 8000ac2:	f000 f9b4 	bl	8000e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f874 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <TIM2_IRQHandler+0x10>)
 8000b32:	f000 ffa1 	bl	8001a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000084 	.word	0x20000084

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff fff8 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b52:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b54:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b68:	4c09      	ldr	r4, [pc, #36]	@ (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f001 fafd 	bl	8002174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fde1 	bl	8000740 <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000b88:	08002234 	.word	0x08002234
  ldr r2, =_sbss
 8000b8c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000b90:	2000010c 	.word	0x2000010c

08000b94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_IRQHandler>

08000b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f920 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba0:	200f      	movs	r0, #15
 8000ba2:	f000 f805 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba6:	f7ff ff3f 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f93b 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 f903 	bl	8000df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000004c 	.word	0x2000004c
 8000c08:	20000054 	.word	0x20000054
 8000c0c:	20000050 	.word	0x20000050

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a03      	ldr	r2, [pc, #12]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000054 	.word	0x20000054
 8000c30:	20000108 	.word	0x20000108

08000c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	@ (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20000108 	.word	0x20000108

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <__NVIC_EnableIRQ+0x34>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	@ (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff90 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff2d 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff42 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff90 	bl	8000d38 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5f 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff35 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa2 	bl	8000d9c <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b08b      	sub	sp, #44	@ 0x2c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e76:	e169      	b.n	800114c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8158 	bne.w	8001146 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a9a      	ldr	r2, [pc, #616]	@ (8001104 <HAL_GPIO_Init+0x2a0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d05e      	beq.n	8000f5e <HAL_GPIO_Init+0xfa>
 8000ea0:	4a98      	ldr	r2, [pc, #608]	@ (8001104 <HAL_GPIO_Init+0x2a0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d875      	bhi.n	8000f92 <HAL_GPIO_Init+0x12e>
 8000ea6:	4a98      	ldr	r2, [pc, #608]	@ (8001108 <HAL_GPIO_Init+0x2a4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d058      	beq.n	8000f5e <HAL_GPIO_Init+0xfa>
 8000eac:	4a96      	ldr	r2, [pc, #600]	@ (8001108 <HAL_GPIO_Init+0x2a4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d86f      	bhi.n	8000f92 <HAL_GPIO_Init+0x12e>
 8000eb2:	4a96      	ldr	r2, [pc, #600]	@ (800110c <HAL_GPIO_Init+0x2a8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d052      	beq.n	8000f5e <HAL_GPIO_Init+0xfa>
 8000eb8:	4a94      	ldr	r2, [pc, #592]	@ (800110c <HAL_GPIO_Init+0x2a8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d869      	bhi.n	8000f92 <HAL_GPIO_Init+0x12e>
 8000ebe:	4a94      	ldr	r2, [pc, #592]	@ (8001110 <HAL_GPIO_Init+0x2ac>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d04c      	beq.n	8000f5e <HAL_GPIO_Init+0xfa>
 8000ec4:	4a92      	ldr	r2, [pc, #584]	@ (8001110 <HAL_GPIO_Init+0x2ac>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d863      	bhi.n	8000f92 <HAL_GPIO_Init+0x12e>
 8000eca:	4a92      	ldr	r2, [pc, #584]	@ (8001114 <HAL_GPIO_Init+0x2b0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d046      	beq.n	8000f5e <HAL_GPIO_Init+0xfa>
 8000ed0:	4a90      	ldr	r2, [pc, #576]	@ (8001114 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d85d      	bhi.n	8000f92 <HAL_GPIO_Init+0x12e>
 8000ed6:	2b12      	cmp	r3, #18
 8000ed8:	d82a      	bhi.n	8000f30 <HAL_GPIO_Init+0xcc>
 8000eda:	2b12      	cmp	r3, #18
 8000edc:	d859      	bhi.n	8000f92 <HAL_GPIO_Init+0x12e>
 8000ede:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee4 <HAL_GPIO_Init+0x80>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000f5f 	.word	0x08000f5f
 8000ee8:	08000f39 	.word	0x08000f39
 8000eec:	08000f4b 	.word	0x08000f4b
 8000ef0:	08000f8d 	.word	0x08000f8d
 8000ef4:	08000f93 	.word	0x08000f93
 8000ef8:	08000f93 	.word	0x08000f93
 8000efc:	08000f93 	.word	0x08000f93
 8000f00:	08000f93 	.word	0x08000f93
 8000f04:	08000f93 	.word	0x08000f93
 8000f08:	08000f93 	.word	0x08000f93
 8000f0c:	08000f93 	.word	0x08000f93
 8000f10:	08000f93 	.word	0x08000f93
 8000f14:	08000f93 	.word	0x08000f93
 8000f18:	08000f93 	.word	0x08000f93
 8000f1c:	08000f93 	.word	0x08000f93
 8000f20:	08000f93 	.word	0x08000f93
 8000f24:	08000f93 	.word	0x08000f93
 8000f28:	08000f41 	.word	0x08000f41
 8000f2c:	08000f55 	.word	0x08000f55
 8000f30:	4a79      	ldr	r2, [pc, #484]	@ (8001118 <HAL_GPIO_Init+0x2b4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f36:	e02c      	b.n	8000f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e029      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	3304      	adds	r3, #4
 8000f46:	623b      	str	r3, [r7, #32]
          break;
 8000f48:	e024      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	3308      	adds	r3, #8
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e01f      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	330c      	adds	r3, #12
 8000f5a:	623b      	str	r3, [r7, #32]
          break;
 8000f5c:	e01a      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f66:	2304      	movs	r3, #4
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e013      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d105      	bne.n	8000f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f74:	2308      	movs	r3, #8
 8000f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	611a      	str	r2, [r3, #16]
          break;
 8000f7e:	e009      	b.n	8000f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f80:	2308      	movs	r3, #8
 8000f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	615a      	str	r2, [r3, #20]
          break;
 8000f8a:	e003      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
          break;
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x130>
          break;
 8000f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2bff      	cmp	r3, #255	@ 0xff
 8000f98:	d801      	bhi.n	8000f9e <HAL_GPIO_Init+0x13a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	e001      	b.n	8000fa2 <HAL_GPIO_Init+0x13e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2bff      	cmp	r3, #255	@ 0xff
 8000fa8:	d802      	bhi.n	8000fb0 <HAL_GPIO_Init+0x14c>
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x152>
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	3b08      	subs	r3, #8
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	6a39      	ldr	r1, [r7, #32]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80b1 	beq.w	8001146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800111c <HAL_GPIO_Init+0x2b8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	@ (800111c <HAL_GPIO_Init+0x2b8>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800111c <HAL_GPIO_Init+0x2b8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ffc:	4a48      	ldr	r2, [pc, #288]	@ (8001120 <HAL_GPIO_Init+0x2bc>)
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a40      	ldr	r2, [pc, #256]	@ (8001124 <HAL_GPIO_Init+0x2c0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d013      	beq.n	8001050 <HAL_GPIO_Init+0x1ec>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a3f      	ldr	r2, [pc, #252]	@ (8001128 <HAL_GPIO_Init+0x2c4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1e8>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a3e      	ldr	r2, [pc, #248]	@ (800112c <HAL_GPIO_Init+0x2c8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1e4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a3d      	ldr	r2, [pc, #244]	@ (8001130 <HAL_GPIO_Init+0x2cc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1e0>
 8001040:	2303      	movs	r3, #3
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x1ee>
 8001044:	2304      	movs	r3, #4
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1ee>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1ee>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1ee>
 8001050:	2300      	movs	r3, #0
 8001052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001062:	492f      	ldr	r1, [pc, #188]	@ (8001120 <HAL_GPIO_Init+0x2bc>)
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	492c      	ldr	r1, [pc, #176]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	608b      	str	r3, [r1, #8]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800108a:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4928      	ldr	r1, [pc, #160]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 8001094:	4013      	ands	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a4:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	4922      	ldr	r1, [pc, #136]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60cb      	str	r3, [r1, #12]
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	491e      	ldr	r1, [pc, #120]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010bc:	4013      	ands	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4918      	ldr	r1, [pc, #96]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4914      	ldr	r1, [pc, #80]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d021      	beq.n	8001138 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	490e      	ldr	r1, [pc, #56]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
 8001100:	e021      	b.n	8001146 <HAL_GPIO_Init+0x2e2>
 8001102:	bf00      	nop
 8001104:	10320000 	.word	0x10320000
 8001108:	10310000 	.word	0x10310000
 800110c:	10220000 	.word	0x10220000
 8001110:	10210000 	.word	0x10210000
 8001114:	10120000 	.word	0x10120000
 8001118:	10110000 	.word	0x10110000
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	40011000 	.word	0x40011000
 8001130:	40011400 	.word	0x40011400
 8001134:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_GPIO_Init+0x304>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	43db      	mvns	r3, r3
 8001140:	4909      	ldr	r1, [pc, #36]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001142:	4013      	ands	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001148:	3301      	adds	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	fa22 f303 	lsr.w	r3, r2, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	f47f ae8e 	bne.w	8000e78 <HAL_GPIO_Init+0x14>
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	372c      	adds	r7, #44	@ 0x2c
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	611a      	str	r2, [r3, #16]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43d9      	mvns	r1, r3
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	400b      	ands	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	611a      	str	r2, [r3, #16]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e272      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8087 	beq.w	80012fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f0:	4b92      	ldr	r3, [pc, #584]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d00c      	beq.n	8001216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fc:	4b8f      	ldr	r3, [pc, #572]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b08      	cmp	r3, #8
 8001206:	d112      	bne.n	800122e <HAL_RCC_OscConfig+0x5e>
 8001208:	4b8c      	ldr	r3, [pc, #560]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001214:	d10b      	bne.n	800122e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001216:	4b89      	ldr	r3, [pc, #548]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d06c      	beq.n	80012fc <HAL_RCC_OscConfig+0x12c>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d168      	bne.n	80012fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e24c      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x76>
 8001238:	4b80      	ldr	r3, [pc, #512]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a7f      	ldr	r2, [pc, #508]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800123e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e02e      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b7b      	ldr	r3, [pc, #492]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7a      	ldr	r2, [pc, #488]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b78      	ldr	r3, [pc, #480]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a77      	ldr	r2, [pc, #476]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0xbc>
 8001272:	4b72      	ldr	r3, [pc, #456]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a71      	ldr	r2, [pc, #452]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b6f      	ldr	r3, [pc, #444]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6e      	ldr	r2, [pc, #440]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 800128c:	4b6b      	ldr	r3, [pc, #428]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6a      	ldr	r2, [pc, #424]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b68      	ldr	r3, [pc, #416]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a67      	ldr	r2, [pc, #412]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcc2 	bl	8000c34 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fcbe 	bl	8000c34 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	@ 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e200      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b5d      	ldr	r3, [pc, #372]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe4>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcae 	bl	8000c34 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcaa 	bl	8000c34 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	@ 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1ec      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b53      	ldr	r3, [pc, #332]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x10c>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x18c>
 8001322:	4b46      	ldr	r3, [pc, #280]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1c0      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4939      	ldr	r1, [pc, #228]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e03a      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fc63 	bl	8000c34 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fc5f 	bl	8000c34 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1a1      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4927      	ldr	r1, [pc, #156]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc42 	bl	8000c34 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc3e 	bl	8000c34 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e180      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d03a      	beq.n	8001454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d019      	beq.n	800141a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <HAL_RCC_OscConfig+0x274>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc22 	bl	8000c34 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc1e 	bl	8000c34 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e160      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f000 fa68 	bl	80018e8 <RCC_Delay>
 8001418:	e01c      	b.n	8001454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_RCC_OscConfig+0x274>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fc08 	bl	8000c34 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001426:	e00f      	b.n	8001448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fc04 	bl	8000c34 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d908      	bls.n	8001448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e146      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	42420000 	.word	0x42420000
 8001444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b92      	ldr	r3, [pc, #584]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e9      	bne.n	8001428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a6 	beq.w	80015ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b8b      	ldr	r3, [pc, #556]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10d      	bne.n	800148e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b88      	ldr	r3, [pc, #544]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a87      	ldr	r2, [pc, #540]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b85      	ldr	r3, [pc, #532]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b82      	ldr	r3, [pc, #520]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149a:	4b7f      	ldr	r3, [pc, #508]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7e      	ldr	r2, [pc, #504]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fbc5 	bl	8000c34 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7ff fbc1 	bl	8000c34 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	@ 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e103      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b75      	ldr	r3, [pc, #468]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x312>
 80014d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e02d      	b.n	800153e <HAL_RCC_OscConfig+0x36e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x334>
 80014ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a69      	ldr	r2, [pc, #420]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b67      	ldr	r3, [pc, #412]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a66      	ldr	r2, [pc, #408]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x36e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x356>
 800150c:	4b61      	ldr	r3, [pc, #388]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a60      	ldr	r2, [pc, #384]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	4b5e      	ldr	r3, [pc, #376]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a5d      	ldr	r2, [pc, #372]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x36e>
 8001526:	4b5b      	ldr	r3, [pc, #364]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a5a      	ldr	r2, [pc, #360]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb75 	bl	8000c34 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fb71 	bl	8000c34 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0b1      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b4b      	ldr	r3, [pc, #300]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ee      	beq.n	800154e <HAL_RCC_OscConfig+0x37e>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb5f 	bl	8000c34 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb5b 	bl	8000c34 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e09b      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b8:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d061      	beq.n	8001688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d146      	bne.n	800165a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015cc:	4b33      	ldr	r3, [pc, #204]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb2f 	bl	8000c34 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fb2b 	bl	8000c34 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e06d      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001600:	d108      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	f023 020f 	bic.w	r2, r3, #15
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4921      	ldr	r1, [pc, #132]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a19      	ldr	r1, [r3, #32]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	430b      	orrs	r3, r1
 8001626:	491b      	ldr	r1, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff faff 	bl	8000c34 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fafb 	bl	8000c34 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e03d      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x46a>
 8001658:	e035      	b.n	80016c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fae8 	bl	8000c34 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fae4 	bl	8000c34 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e026      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x498>
 8001686:	e01e      	b.n	80016c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e019      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
 8001694:	40021000 	.word	0x40021000
 8001698:	40007000 	.word	0x40007000
 800169c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <HAL_RCC_OscConfig+0x500>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0a0      	b.n	800182a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b4c      	ldr	r3, [pc, #304]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a4b      	ldr	r2, [pc, #300]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800170a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b46      	ldr	r3, [pc, #280]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a45      	ldr	r2, [pc, #276]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 800171e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b43      	ldr	r3, [pc, #268]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4940      	ldr	r1, [pc, #256]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b3a      	ldr	r3, [pc, #232]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e05b      	b.n	800182a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b2c      	ldr	r3, [pc, #176]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4929      	ldr	r1, [pc, #164]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fa4e 	bl	8000c34 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa4a 	bl	8000c34 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e03b      	b.n	800182a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4915      	ldr	r1, [pc, #84]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490d      	ldr	r1, [pc, #52]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f81f 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_RCC_ClockConfig+0x160>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4909      	ldr	r1, [pc, #36]	@ (8001838 <HAL_RCC_ClockConfig+0x164>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_RCC_ClockConfig+0x168>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_RCC_ClockConfig+0x16c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f9c4 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	080021fc 	.word	0x080021fc
 800183c:	2000004c 	.word	0x2000004c
 8001840:	20000050 	.word	0x20000050

08001844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x90>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x30>
 800186e:	2b08      	cmp	r3, #8
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x36>
 8001872:	e026      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001876:	613b      	str	r3, [r7, #16]
      break;
 8001878:	e026      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	0c9b      	lsrs	r3, r3, #18
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00f      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x90>)
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800189c:	5cd3      	ldrb	r3, [r2, r3]
 800189e:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	fb03 f202 	mul.w	r2, r3, r2
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e004      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
      break;
 80018c0:	e002      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x94>)
 80018c4:	613b      	str	r3, [r7, #16]
      break;
 80018c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c8:	693b      	ldr	r3, [r7, #16]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	007a1200 	.word	0x007a1200
 80018dc:	0800220c 	.word	0x0800220c
 80018e0:	0800221c 	.word	0x0800221c
 80018e4:	003d0900 	.word	0x003d0900

080018e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <RCC_Delay+0x34>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <RCC_Delay+0x38>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a5b      	lsrs	r3, r3, #9
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001904:	bf00      	nop
  }
  while (Delay --);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1e5a      	subs	r2, r3, #1
 800190a:	60fa      	str	r2, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f9      	bne.n	8001904 <RCC_Delay+0x1c>
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	2000004c 	.word	0x2000004c
 8001920:	10624dd3 	.word	0x10624dd3

08001924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e041      	b.n	80019ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f89e 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3304      	adds	r3, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f000 fa64 	bl	8001e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d001      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e03f      	b.n	8001a5c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <HAL_TIM_Base_Start_IT+0xa4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_TIM_Base_Start_IT+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a06:	d00e      	beq.n	8001a26 <HAL_TIM_Base_Start_IT+0x62>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <HAL_TIM_Base_Start_IT+0xa8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_TIM_Base_Start_IT+0x62>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <HAL_TIM_Base_Start_IT+0xac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d004      	beq.n	8001a26 <HAL_TIM_Base_Start_IT+0x62>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d111      	bne.n	8001a4a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d010      	beq.n	8001a5a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a48:	e007      	b.n	8001a5a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40012c00 	.word	0x40012c00
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40000800 	.word	0x40000800
 8001a74:	40014000 	.word	0x40014000

08001a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d020      	beq.n	8001adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0202 	mvn.w	r2, #2
 8001aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f998 	bl	8001df8 <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f98b 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f99a 	bl	8001e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d020      	beq.n	8001b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0204 	mvn.w	r2, #4
 8001af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f972 	bl	8001df8 <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f965 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f974 	bl	8001e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d020      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0208 	mvn.w	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f94c 	bl	8001df8 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f93f 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f94e 	bl	8001e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0210 	mvn.w	r2, #16
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2208      	movs	r2, #8
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f926 	bl	8001df8 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f919 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f928 	bl	8001e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00c      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0201 	mvn.w	r2, #1
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe ff06 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 faa5 	bl	8002152 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8f8 	bl	8001e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0220 	mvn.w	r2, #32
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fa78 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_TIM_ConfigClockSource+0x1c>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0b4      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x186>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cac:	d03e      	beq.n	8001d2c <HAL_TIM_ConfigClockSource+0xd4>
 8001cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cb2:	f200 8087 	bhi.w	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cba:	f000 8086 	beq.w	8001dca <HAL_TIM_ConfigClockSource+0x172>
 8001cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cc2:	d87f      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc4:	2b70      	cmp	r3, #112	@ 0x70
 8001cc6:	d01a      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0xa6>
 8001cc8:	2b70      	cmp	r3, #112	@ 0x70
 8001cca:	d87b      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ccc:	2b60      	cmp	r3, #96	@ 0x60
 8001cce:	d050      	beq.n	8001d72 <HAL_TIM_ConfigClockSource+0x11a>
 8001cd0:	2b60      	cmp	r3, #96	@ 0x60
 8001cd2:	d877      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cd4:	2b50      	cmp	r3, #80	@ 0x50
 8001cd6:	d03c      	beq.n	8001d52 <HAL_TIM_ConfigClockSource+0xfa>
 8001cd8:	2b50      	cmp	r3, #80	@ 0x50
 8001cda:	d873      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cdc:	2b40      	cmp	r3, #64	@ 0x40
 8001cde:	d058      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x13a>
 8001ce0:	2b40      	cmp	r3, #64	@ 0x40
 8001ce2:	d86f      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ce4:	2b30      	cmp	r3, #48	@ 0x30
 8001ce6:	d064      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001ce8:	2b30      	cmp	r3, #48	@ 0x30
 8001cea:	d86b      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d060      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d867      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d05c      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d05a      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cfc:	e062      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d0e:	f000 f992 	bl	8002036 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	609a      	str	r2, [r3, #8]
      break;
 8001d2a:	e04f      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d3c:	f000 f97b 	bl	8002036 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d4e:	609a      	str	r2, [r3, #8]
      break;
 8001d50:	e03c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f000 f8f2 	bl	8001f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2150      	movs	r1, #80	@ 0x50
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f949 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001d70:	e02c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f000 f910 	bl	8001fa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2160      	movs	r1, #96	@ 0x60
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f939 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001d90:	e01c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f000 f8d2 	bl	8001f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2140      	movs	r1, #64	@ 0x40
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f929 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001db0:	e00c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f000 f920 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001dc2:	e003      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc8:	e000      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3b      	ldr	r2, [pc, #236]	@ (8001f30 <TIM_Base_SetConfig+0x100>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <TIM_Base_SetConfig+0x30>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4e:	d007      	beq.n	8001e60 <TIM_Base_SetConfig+0x30>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a38      	ldr	r2, [pc, #224]	@ (8001f34 <TIM_Base_SetConfig+0x104>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0x30>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <TIM_Base_SetConfig+0x108>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2e      	ldr	r2, [pc, #184]	@ (8001f30 <TIM_Base_SetConfig+0x100>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d017      	beq.n	8001eaa <TIM_Base_SetConfig+0x7a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d013      	beq.n	8001eaa <TIM_Base_SetConfig+0x7a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a2b      	ldr	r2, [pc, #172]	@ (8001f34 <TIM_Base_SetConfig+0x104>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00f      	beq.n	8001eaa <TIM_Base_SetConfig+0x7a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <TIM_Base_SetConfig+0x108>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <TIM_Base_SetConfig+0x7a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a29      	ldr	r2, [pc, #164]	@ (8001f3c <TIM_Base_SetConfig+0x10c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <TIM_Base_SetConfig+0x7a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a28      	ldr	r2, [pc, #160]	@ (8001f40 <TIM_Base_SetConfig+0x110>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d003      	beq.n	8001eaa <TIM_Base_SetConfig+0x7a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <TIM_Base_SetConfig+0x114>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <TIM_Base_SetConfig+0x100>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00b      	beq.n	8001f00 <TIM_Base_SetConfig+0xd0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <TIM_Base_SetConfig+0x10c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <TIM_Base_SetConfig+0xd0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <TIM_Base_SetConfig+0x110>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0xd0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <TIM_Base_SetConfig+0x114>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d103      	bne.n	8001f08 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f023 0201 	bic.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
  }
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800

08001f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f023 0201 	bic.w	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f023 030a 	bic.w	r3, r3, #10
 8001f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	621a      	str	r2, [r3, #32]
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f023 0210 	bic.w	r2, r3, #16
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	031b      	lsls	r3, r3, #12
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	621a      	str	r2, [r3, #32]
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	f043 0307 	orr.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002050:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	609a      	str	r2, [r3, #8]
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002088:	2302      	movs	r3, #2
 800208a:	e04b      	b.n	8002124 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d8:	d00e      	beq.n	80020f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a13      	ldr	r2, [pc, #76]	@ (8002138 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d004      	beq.n	80020f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d10c      	bne.n	8002112 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	4313      	orrs	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40014000 	.word	0x40014000

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <memset>:
 8002164:	4603      	mov	r3, r0
 8002166:	4402      	add	r2, r0
 8002168:	4293      	cmp	r3, r2
 800216a:	d100      	bne.n	800216e <memset+0xa>
 800216c:	4770      	bx	lr
 800216e:	f803 1b01 	strb.w	r1, [r3], #1
 8002172:	e7f9      	b.n	8002168 <memset+0x4>

08002174 <__libc_init_array>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	2600      	movs	r6, #0
 8002178:	4d0c      	ldr	r5, [pc, #48]	@ (80021ac <__libc_init_array+0x38>)
 800217a:	4c0d      	ldr	r4, [pc, #52]	@ (80021b0 <__libc_init_array+0x3c>)
 800217c:	1b64      	subs	r4, r4, r5
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	42a6      	cmp	r6, r4
 8002182:	d109      	bne.n	8002198 <__libc_init_array+0x24>
 8002184:	f000 f81a 	bl	80021bc <_init>
 8002188:	2600      	movs	r6, #0
 800218a:	4d0a      	ldr	r5, [pc, #40]	@ (80021b4 <__libc_init_array+0x40>)
 800218c:	4c0a      	ldr	r4, [pc, #40]	@ (80021b8 <__libc_init_array+0x44>)
 800218e:	1b64      	subs	r4, r4, r5
 8002190:	10a4      	asrs	r4, r4, #2
 8002192:	42a6      	cmp	r6, r4
 8002194:	d105      	bne.n	80021a2 <__libc_init_array+0x2e>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	f855 3b04 	ldr.w	r3, [r5], #4
 800219c:	4798      	blx	r3
 800219e:	3601      	adds	r6, #1
 80021a0:	e7ee      	b.n	8002180 <__libc_init_array+0xc>
 80021a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a6:	4798      	blx	r3
 80021a8:	3601      	adds	r6, #1
 80021aa:	e7f2      	b.n	8002192 <__libc_init_array+0x1e>
 80021ac:	0800222c 	.word	0x0800222c
 80021b0:	0800222c 	.word	0x0800222c
 80021b4:	0800222c 	.word	0x0800222c
 80021b8:	08002230 	.word	0x08002230

080021bc <_init>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr

080021c8 <_fini>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr
